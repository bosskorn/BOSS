/**
 * ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö BlueDash
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
 */

import { randomUUID } from 'crypto';

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
export interface MockShippingOption {
  id: string;
  name: string;
  code: string;
  price: number;
  estimatedDays: number;
  icon?: string;
  description?: string;
  providerName: string;
  isPopular?: boolean;
  isCODAvailable: boolean;
  maxCODAmount?: number;
}

export interface MockTrackingInfo {
  trackingNumber: string;
  status: 'pending' | 'in_transit' | 'out_for_delivery' | 'delivered' | 'failed';
  statusDescription: string;
  timestamp: Date;
  location?: string;
  estimatedDelivery?: Date;
  events: Array<{
    status: string;
    timestamp: Date;
    location?: string;
    description: string;
  }>;
}

export interface MockAddress {
  province: string;
  district?: string;
  subdistrict?: string;
  zipcode: string;
  addressLine1?: string;
  addressLine2?: string;
}

export interface MockShipmentDetails {
  weight: number; // ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
  width?: number; // ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
  height?: number; // ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£ 
  length?: number; // ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
  parcelValue?: number; // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏û‡∏±‡∏™‡∏î‡∏∏
  isCOD?: boolean; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  codAmount?: number; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
}

export interface MockSenderInfo {
  name: string;
  phone: string;
  address: MockAddress;
}

export interface MockRecipientInfo {
  name: string;
  phone: string;
  address: MockAddress;
}

// ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
const MOCK_SHIPPING_PROVIDERS = [
  {
    id: 'bluexpress', 
    name: 'Blue Express',
    logo: 'üöö Blue Express',
    description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-2 ‡∏ß‡∏±‡∏ô',
    services: [
      {
        code: 'bluexpress_normal',
        name: '‡∏õ‡∏Å‡∏ï‡∏¥ (1-2 ‡∏ß‡∏±‡∏ô)',
        estimatedDays: 2,
        icon: 'üöö',
        isCODAvailable: true,
        maxCODAmount: 30000,
      },
      {
        code: 'bluexpress_express',
        name: '‡∏î‡πà‡∏ß‡∏ô (1 ‡∏ß‡∏±‡∏ô)',
        estimatedDays: 1,
        icon: '‚ö°',
        isPopular: true,
        isCODAvailable: true,
        maxCODAmount: 30000,
      },
      {
        code: 'bluexpress_sameday',
        name: '‡∏™‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
        estimatedDays: 0,
        icon: 'üî•',
        isCODAvailable: true,
        maxCODAmount: 10000,
      }
    ]
  },
  {
    id: 'speedline',
    name: 'SpeedLine',
    logo: '‚úàÔ∏è SpeedLine',
    description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î',
    services: [
      {
        code: 'speedline_economy',
        name: '‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î (2-3 ‡∏ß‡∏±‡∏ô)',
        estimatedDays: 3, 
        icon: 'üöö',
        isPopular: true,
        isCODAvailable: true,
        maxCODAmount: 25000,
      },
      {
        code: 'speedline_express',
        name: '‡∏î‡πà‡∏ß‡∏ô (1-2 ‡∏ß‡∏±‡∏ô)',
        estimatedDays: 2,
        icon: '‚ö°',
        isCODAvailable: true,
        maxCODAmount: 25000,
      }
    ]
  },
  {
    id: 'thaistar',
    name: 'ThaiStar Delivery',
    logo: 'üåü ThaiStar',
    description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏ó‡∏¢',
    services: [
      {
        code: 'thaistar_standard',
        name: '‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (2-3 ‡∏ß‡∏±‡∏ô)',
        estimatedDays: 3,
        icon: 'üöö',
        isCODAvailable: true, 
        maxCODAmount: 35000,
      },
      {
        code: 'thaistar_premium',
        name: '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° (1-2 ‡∏ß‡∏±‡∏ô)',
        estimatedDays: 2,
        icon: '‚≠ê',
        isPopular: true,
        isCODAvailable: true,
        maxCODAmount: 35000,
      }
    ]
  }
];

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
const calculatePrice = (weight: number, distance: number, serviceType: string): number => {
  let basePrice = 0;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
  if (weight <= 1) {
    basePrice = 35;
  } else if (weight <= 3) {
    basePrice = 50;
  } else if (weight <= 5) {
    basePrice = 65;
  } else if (weight <= 10) {
    basePrice = 80;
  } else {
    basePrice = 80 + (weight - 10) * 10;
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
  const distanceFactor = Math.min(distance / 100, 5); // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤
  basePrice += basePrice * (distanceFactor * 0.2);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
  if (serviceType.includes('express')) {
    basePrice *= 1.4; // ‡∏î‡πà‡∏ß‡∏ô‡πÅ‡∏û‡∏á‡∏Å‡∏ß‡πà‡∏≤ 40%
  } else if (serviceType.includes('sameday')) {
    basePrice *= 2.0; // ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏û‡∏á‡∏Å‡∏ß‡πà‡∏≤ 100%
  } else if (serviceType.includes('economy')) {
    basePrice *= 0.8; // ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ñ‡∏π‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20%
  }
  
  return Math.round(basePrice);
};

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå
const calculateMockDistance = (fromZipcode: string, toZipcode: string): number => {
  // ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
  const getRegion = (zipcode: string): string => {
    const zipNumber = parseInt(zipcode);
    if (zipNumber >= 10000 && zipNumber <= 19999) return 'central';
    if (zipNumber >= 20000 && zipNumber <= 29999) return 'eastern';
    if (zipNumber >= 30000 && zipNumber <= 39999) return 'northeastern';
    if (zipNumber >= 40000 && zipNumber <= 49999) return 'northeastern';
    if (zipNumber >= 50000 && zipNumber <= 58999) return 'northern';
    if (zipNumber >= 70000 && zipNumber <= 79999) return 'western';
    if (zipNumber >= 80000 && zipNumber <= 96999) return 'southern';
    return 'central';
  };
  
  const fromRegion = getRegion(fromZipcode);
  const toRegion = getRegion(toZipcode);
  
  if (fromZipcode === toZipcode) return 5; // ‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  
  if (fromRegion === toRegion) {
    // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    return 50 + Math.abs(parseInt(fromZipcode) - parseInt(toZipcode)) % 100;
  } else {
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
    return 200 + Math.abs(parseInt(fromZipcode) - parseInt(toZipcode)) % 300;
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
 */
export const getMockShippingOptions = (
  fromAddress: MockAddress,
  toAddress: MockAddress,
  details: MockShipmentDetails
): Promise<MockShippingOption[]> => {
  return new Promise((resolve) => {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    setTimeout(() => {
      const distance = calculateMockDistance(
        fromAddress.zipcode, 
        toAddress.zipcode
      );
      
      const options: MockShippingOption[] = [];
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
      MOCK_SHIPPING_PROVIDERS.forEach(provider => {
        provider.services.forEach(service => {
          const price = calculatePrice(details.weight, distance, service.code);
          
          options.push({
            id: `${provider.id}_${service.code}_${Date.now()}`,
            name: service.name,
            code: service.code,
            price: price,
            estimatedDays: service.estimatedDays,
            icon: service.icon,
            description: `‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢ ${provider.name}`,
            providerName: provider.name,
            isPopular: service.isPopular || false,
            isCODAvailable: service.isCODAvailable,
            maxCODAmount: service.maxCODAmount,
          });
        });
      });
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
      options.sort((a, b) => a.price - b.price);
      
      resolve(options);
    }, 800); // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á API 800ms
  });
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
 */
export const createMockShipment = (
  sender: MockSenderInfo,
  recipient: MockRecipientInfo,
  details: MockShipmentDetails,
  shippingCode: string
): Promise<{ trackingNumber: string; price: number }> => {
  return new Promise((resolve) => {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    setTimeout(() => {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
      const providerCode = shippingCode.split('_')[0].substring(0, 3).toUpperCase();
      const randomPart = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
      const trackingNumber = `${providerCode}${randomPart}TH`;
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
      const distance = calculateMockDistance(
        sender.address.zipcode,
        recipient.address.zipcode
      );
      
      const price = calculatePrice(details.weight, distance, shippingCode);
      
      resolve({
        trackingNumber,
        price
      });
    }, 1500); // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  });
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
 */
export const getMockTrackingInfo = (trackingNumber: string): Promise<MockTrackingInfo> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
      const statuses = ['pending', 'in_transit', 'out_for_delivery', 'delivered', 'failed'] as const;
      const randomIndex = Math.floor(Math.random() * statuses.length);
      const status = statuses[randomIndex];
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      let statusDescription = '';
      switch (status) {
        case 'pending':
          statusDescription = '‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏™‡πà‡∏á';
          break;
        case 'in_transit':
          statusDescription = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á';
          break;
        case 'out_for_delivery':
          statusDescription = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏™‡πà‡∏á';
          break;
        case 'delivered': 
          statusDescription = '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
          break;
        case 'failed':
          statusDescription = '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
          break;
        default:
          statusDescription = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏û‡∏±‡∏™‡∏î‡∏∏
      const now = new Date();
      const events = [];
      
      events.push({
        status: 'created',
        timestamp: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 2), // 2 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        location: '‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á',
        description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
      });
      
      if (status !== 'pending') {
        events.push({
          status: 'picked_up',
          timestamp: new Date(now.getTime() - 1000 * 60 * 60 * 24), // 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
          location: '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á',
          description: '‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'
        });
      }
      
      if (status === 'in_transit' || status === 'out_for_delivery' || status === 'delivered' || status === 'failed') {
        events.push({
          status: 'in_transit',
          timestamp: new Date(now.getTime() - 1000 * 60 * 60 * 12), // 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô
          location: '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏Å‡∏•‡∏≤‡∏á',
          description: '‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'
        });
      }
      
      if (status === 'out_for_delivery' || status === 'delivered' || status === 'failed') {
        events.push({
          status: 'out_for_delivery',
          timestamp: new Date(now.getTime() - 1000 * 60 * 60 * 2), // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô 
          location: '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
          description: '‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö'
        });
      }
      
      if (status === 'delivered') {
        events.push({
          status: 'delivered',
          timestamp: new Date(now.getTime() - 1000 * 60 * 30), // 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
          location: '‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
          description: '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
      }
      
      if (status === 'failed') {
        events.push({
          status: 'failed',
          timestamp: new Date(now.getTime() - 1000 * 60 * 30), // 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
          location: '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
          description: '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö'
        });
      }
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
      events.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
      const trackingInfo: MockTrackingInfo = {
        trackingNumber,
        status,
        statusDescription,
        timestamp: events[events.length - 1].timestamp,
        location: events[events.length - 1].location,
        estimatedDelivery: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 2), // ‡∏≠‡∏µ‡∏Å 2 ‡∏ß‡∏±‡∏ô
        events,
      };
      
      resolve(trackingInfo);
    }, 1000); // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  });
};

/**
 * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
 */
export const MOCK_THAI_PROVINCES = [
  {
    province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
    districts: [
      { name: '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£', zipcode: '10200' },
      { name: '‡∏î‡∏∏‡∏™‡∏¥‡∏ï', zipcode: '10300' },
      { name: '‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏≠‡∏Å', zipcode: '10530' },
      { name: '‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å', zipcode: '10500' },
      { name: '‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô', zipcode: '10220' }
    ]
  },
  {
    province: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
    districts: [
      { name: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', zipcode: '50000' },
      { name: '‡∏à‡∏≠‡∏°‡∏ó‡∏≠‡∏á', zipcode: '50160' },
      { name: '‡πÅ‡∏°‡πà‡πÅ‡∏à‡πà‡∏°', zipcode: '50270' },
      { name: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏î‡∏≤‡∏ß', zipcode: '50170' },
      { name: '‡∏î‡∏≠‡∏¢‡∏™‡∏∞‡πÄ‡∏Å‡πá‡∏î', zipcode: '50220' }
    ]
  },
  {
    province: '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ',
    districts: [
      { name: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', zipcode: '20000' },
      { name: '‡∏ö‡πâ‡∏≤‡∏ô‡∏ö‡∏∂‡∏á', zipcode: '20170' },
      { name: '‡∏´‡∏ô‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà', zipcode: '20190' },
      { name: '‡∏ö‡∏≤‡∏á‡∏•‡∏∞‡∏°‡∏∏‡∏á', zipcode: '20150' },
      { name: '‡∏û‡∏≤‡∏ô‡∏ó‡∏≠‡∏á', zipcode: '20160' }
    ]
  },
  {
    province: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    districts: [
      { name: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', zipcode: '57000' },
      { name: '‡πÄ‡∏ß‡∏µ‡∏¢‡∏á‡∏ä‡∏±‡∏¢', zipcode: '57210' },
      { name: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á', zipcode: '57140' },
      { name: '‡πÄ‡∏ó‡∏¥‡∏á', zipcode: '57160' },
      { name: '‡∏û‡∏≤‡∏ô', zipcode: '57120' }
    ]
  },
  {
    province: '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',
    districts: [
      { name: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', zipcode: '30000' },
      { name: '‡∏Ñ‡∏£‡∏ö‡∏∏‡∏£‡∏µ', zipcode: '30250' },
      { name: '‡∏™‡∏µ‡∏Ñ‡∏¥‡πâ‡∏ß', zipcode: '30140' },
      { name: '‡∏õ‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á', zipcode: '30130' },
      { name: '‡∏û‡∏¥‡∏°‡∏≤‡∏¢', zipcode: '30110' }
    ]
  }
];